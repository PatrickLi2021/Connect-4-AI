// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function createInitialColumns(height) {
  if (height !== 0) {
    if (height !== 1) {
      return {
              hd: /* E */0,
              tl: createInitialColumns(height - 1 | 0)
            };
    } else {
      return {
              hd: /* E */0,
              tl: /* [] */0
            };
    }
  } else {
    return Pervasives.failwith("invalid dimensions");
  }
}

function createInitialBoard(height, width) {
  if (width !== 0) {
    if (width !== 1) {
      return {
              hd: createInitialColumns(height),
              tl: createInitialBoard(height, width - 1 | 0)
            };
    } else {
      return {
              hd: createInitialColumns(height),
              tl: /* [] */0
            };
    }
  } else {
    return Pervasives.failwith("invalid dimensions");
  }
}

function initialState(s) {
  var boardDims = CS17SetupGame$Game.parseBoardDims(s);
  var boardHeight = CS17SetupGame$Game.getBoardHeight(boardDims);
  var boardWidth = CS17SetupGame$Game.getBoardWidth(boardDims);
  return /* State */{
          _0: createInitialBoard(boardHeight, boardWidth),
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        };
}

function stringOfPlayer(player) {
  if (player) {
    return "Player 2";
  } else {
    return "Player 1";
  }
}

function stringOfCell(c) {
  switch (c) {
    case /* E */0 :
        return " ";
    case /* R */1 :
        return "R";
    case /* B */2 :
        return "B";
    case /* G */3 :
        return "G";
    
  }
}

function stringOfColumn(alos) {
  if (!alos) {
    return Pervasives.failwith("Board cannot have an empty column");
  }
  var tl = alos.tl;
  var hd = alos.hd;
  if (tl) {
    return "[" + (hd + ("] " + stringOfColumn(tl)));
  } else {
    return "[" + (hd + "]");
  }
}

function boardPrintHelper(lst2) {
  if (lst2) {
    return stringOfColumn(List.map(stringOfCell, lst2.hd)) + ("\n" + boardPrintHelper(lst2.tl));
  } else {
    return "";
  }
}

function transpose(bd) {
  if (!bd) {
    return Pervasives.failwith("a board cannot have an empty column");
  }
  var match = bd.hd;
  if (match) {
    if (match.tl) {
      return {
              hd: List.map(List.hd, bd),
              tl: transpose(List.map(List.tl, bd))
            };
    } else {
      return {
              hd: List.flatten(bd),
              tl: /* [] */0
            };
    }
  } else {
    return Pervasives.failwith("a board cannot have an empty column");
  }
}

function stringOfState(st) {
  return boardPrintHelper(transpose(st._0));
}

function stringOfMove(m) {
  return String(m._0);
}

function legalMoves(st) {
  var legalMoveHelper = function (_bd, _n) {
    while(true) {
      var n = _n;
      var bd = _bd;
      if (!bd) {
        return /* [] */0;
      }
      var match = bd.hd;
      if (!match) {
        return Pervasives.failwith("board column cannot be empty");
      }
      var tl2 = bd.tl;
      if (match.hd === /* E */0) {
        return {
                hd: /* Move */{
                  _0: n
                },
                tl: legalMoveHelper(tl2, n + 1 | 0)
              };
      }
      _n = n + 1 | 0;
      _bd = tl2;
      continue ;
    };
  };
  var tmp = st._1;
  if (typeof tmp === "number" || tmp.TAG === /* Win */0) {
    return /* [] */0;
  } else {
    return legalMoveHelper(st._0, 1);
  }
}

function gameStatus(st) {
  return st._1;
}

function moveOfString(str, st) {
  if (List.mem(str, List.map(stringOfMove, legalMoves(st)))) {
    return /* Move */{
            _0: Caml_format.caml_int_of_string(str)
          };
  } else {
    return Pervasives.failwith("Not a legal move; choose another move");
  }
}

var horzFlip = List.rev;

function diagonalHelper(bd) {
  var createBogusCells = function (n) {
    if (n !== 0) {
      return {
              hd: /* G */3,
              tl: createBogusCells(n - 1 | 0)
            };
    } else {
      return /* [] */0;
    }
  };
  if (!bd) {
    return Pervasives.failwith("board should not have zero rows");
  }
  var hd = bd.hd;
  if (hd && !bd.tl) {
    return bd;
  }
  var tl = bd.tl;
  return {
          hd: List.append(hd, createBogusCells(List.length({
                        hd: hd,
                        tl: tl
                      }) - 1 | 0)),
          tl: List.map((function (x) {
                  return {
                          hd: /* G */3,
                          tl: x
                        };
                }), diagonalHelper(tl))
        };
}

function produceOutcome(p, col, lst) {
  var fourConsecutiveColumn = function (_col) {
    while(true) {
      var col = _col;
      if (!col) {
        return false;
      }
      var _hd = col.hd;
      if (_hd !== 0) {
        switch (_hd) {
          case /* R */1 :
              var match = col.tl;
              if (match) {
                if (match.hd !== 1) {
                  _col = col.tl;
                  continue ;
                }
                var match$1 = match.tl;
                if (match$1) {
                  if (match$1.hd !== 1) {
                    _col = col.tl;
                    continue ;
                  }
                  var match$2 = match$1.tl;
                  if (match$2) {
                    if (match$2.hd === 1) {
                      return true;
                    }
                    _col = col.tl;
                    continue ;
                  }
                  _col = col.tl;
                  continue ;
                }
                _col = col.tl;
                continue ;
              }
              _col = col.tl;
              continue ;
          case /* B */2 :
              var match$3 = col.tl;
              if (match$3) {
                if (match$3.hd !== 2) {
                  _col = col.tl;
                  continue ;
                }
                var match$4 = match$3.tl;
                if (match$4) {
                  if (match$4.hd !== 2) {
                    _col = col.tl;
                    continue ;
                  }
                  var match$5 = match$4.tl;
                  if (match$5) {
                    if (match$5.hd === 2) {
                      return true;
                    }
                    _col = col.tl;
                    continue ;
                  }
                  _col = col.tl;
                  continue ;
                }
                _col = col.tl;
                continue ;
              }
              _col = col.tl;
              continue ;
          case /* G */3 :
              _col = col.tl;
              continue ;
          
        }
      } else {
        _col = col.tl;
        continue ;
      }
    };
  };
  if (fourConsecutiveColumn(col)) {
    return {
            TAG: /* Win */0,
            _0: p
          };
  } else if (lst) {
    if (p === /* P1 */0) {
      return {
              TAG: /* Ongoing */1,
              _0: /* P2 */1
            };
    } else {
      return {
              TAG: /* Ongoing */1,
              _0: /* P1 */0
            };
    }
  } else {
    return /* Draw */0;
  }
}

function changeBoardHelper(bd, p, n) {
  var changeColumnHelper = function (p, lst) {
    if (!lst) {
      return Pervasives.failwith("Column should have at least 1 empty cell when the player makes a move");
    }
    if (lst.hd !== 0) {
      return Pervasives.failwith("Column should have at least 1 empty cell when the player makes a move");
    }
    var tl = lst.tl;
    if (tl && tl.hd === 0) {
      return {
              hd: /* E */0,
              tl: changeColumnHelper(p, {
                    hd: /* E */0,
                    tl: tl.tl
                  })
            };
    }
    if (p === /* P1 */0) {
      return {
              hd: /* B */2,
              tl: tl
            };
    } else {
      return {
              hd: /* R */1,
              tl: tl
            };
    }
  };
  if (!bd) {
    return Pervasives.failwith("board dimension and selected column number mismatch");
  }
  var tl = bd.tl;
  var hd = bd.hd;
  if (n !== 0) {
    return {
            hd: hd,
            tl: changeBoardHelper(tl, p, n - 1 | 0)
          };
  } else {
    return {
            hd: changeColumnHelper(p, hd),
            tl: tl
          };
  }
}

function checkFourInARow(bd, p) {
  var fourConsecutive = function (p, bd, lst) {
    return List.map((function (x) {
                  return produceOutcome(p, x, lst);
                }), bd);
  };
  var lst = legalMoves(/* State */{
        _0: bd,
        _1: {
          TAG: /* Ongoing */1,
          _0: p
        }
      });
  if (List.mem({
          TAG: /* Win */0,
          _0: p
        }, List.flatten(List.map((function (x) {
                    return fourConsecutive(p, x, lst);
                  }), {
                  hd: bd,
                  tl: {
                    hd: transpose(bd),
                    tl: {
                      hd: transpose(diagonalHelper(transpose(bd))),
                      tl: {
                        hd: transpose(diagonalHelper(List.rev(transpose(bd)))),
                        tl: /* [] */0
                      }
                    }
                  }
                })))) {
    return {
            TAG: /* Win */0,
            _0: p
          };
  } else {
    return List.hd(fourConsecutive(p, bd, lst));
  }
}

function nextState(st, m) {
  var p = st._1;
  if (typeof p === "number") {
    return Pervasives.failwith("Game should be ongoing when it reaches nextState");
  }
  if (p.TAG === /* Win */0) {
    return Pervasives.failwith("Game should be ongoing when it reaches nextState");
  }
  var p$1 = p._0;
  var newBoard = changeBoardHelper(st._0, p$1, m._0 - 1 | 0);
  return /* State */{
          _0: newBoard,
          _1: checkFourInARow(newBoard, p$1)
        };
}

function pointsForXInAColumn(_col) {
  while(true) {
    var col = _col;
    if (!col) {
      return 0.0;
    }
    var _hd = col.hd;
    var exit = 0;
    switch (_hd) {
      case /* E */0 :
          var match = col.tl;
          if (match) {
            var match$1 = match.hd;
            if (match$1 !== 0) {
              switch (match$1) {
                case /* R */1 :
                    var match$2 = match.tl;
                    if (match$2) {
                      var match$3 = match$2.hd;
                      if (match$3 !== 0) {
                        switch (match$3) {
                          case /* R */1 :
                              var match$4 = match$2.tl;
                              if (match$4 && match$4.hd === 1) {
                                var match$5 = match$4.tl;
                                if (match$5) {
                                  var match$6 = match$5.hd;
                                  if (match$6 !== 1) {
                                    if (match$6 === 0) {
                                      return -10000000.0 + pointsForXInAColumn(match$5.tl);
                                    }
                                    
                                  } else {
                                    exit = 2;
                                  }
                                }
                                
                              }
                              break;
                          case /* B */2 :
                              var match$7 = match$2.tl;
                              if (match$7 && match$7.hd === 2) {
                                var match$8 = match$7.tl;
                                if (match$8 && match$8.hd === 2) {
                                  return -10000000000000000.0 + pointsForXInAColumn(match$8.tl);
                                }
                                
                              }
                              break;
                          case /* G */3 :
                              break;
                          
                        }
                      }
                      
                    }
                    break;
                case /* B */2 :
                    var match$9 = match.tl;
                    if (match$9 && match$9.hd === 2) {
                      var match$10 = match$9.tl;
                      if (match$10 && match$10.hd === 2) {
                        var match$11 = match$10.tl;
                        if (match$11) {
                          var match$12 = match$11.hd;
                          if (match$12 < 3) {
                            switch (match$12) {
                              case /* E */0 :
                                  return 10000000.0 + pointsForXInAColumn(match$11.tl);
                              case /* R */1 :
                                  break;
                              case /* B */2 :
                                  exit = 2;
                                  break;
                              
                            }
                          }
                          
                        }
                        
                      }
                      
                    }
                    break;
                case /* G */3 :
                    _col = col.tl;
                    continue ;
                
              }
            } else {
              _col = col.tl;
              continue ;
            }
          } else {
            _col = col.tl;
            continue ;
          }
          break;
      case /* R */1 :
          var match$13 = col.tl;
          if (match$13) {
            switch (match$13.hd) {
              case /* E */0 :
                  var tl = match$13.tl;
                  if (!tl) {
                    return -0.1 + pointsForXInAColumn(tl);
                  }
                  if (tl.hd !== 1) {
                    return -0.1 + pointsForXInAColumn(tl);
                  }
                  var tl$1 = tl.tl;
                  if (tl$1) {
                    if (tl$1.hd !== 1) {
                      return -100.0 + pointsForXInAColumn(tl$1);
                    } else {
                      return -10000.0 + pointsForXInAColumn(tl$1.tl);
                    }
                  } else {
                    return -100.0 + pointsForXInAColumn(tl$1);
                  }
              case /* R */1 :
                  var match$14 = match$13.tl;
                  if (match$14) {
                    switch (match$14.hd) {
                      case /* E */0 :
                          var tl$2 = match$14.tl;
                          if (tl$2) {
                            if (tl$2.hd !== 1) {
                              return -100.0 + pointsForXInAColumn(tl$2);
                            } else {
                              return -10000.0 + pointsForXInAColumn(tl$2.tl);
                            }
                          } else {
                            return -100.0 + pointsForXInAColumn(tl$2);
                          }
                      case /* R */1 :
                          var match$15 = match$14.tl;
                          if (match$15) {
                            switch (match$15.hd) {
                              case /* E */0 :
                                  return -10000.0 + pointsForXInAColumn(match$15.tl);
                              case /* R */1 :
                                  return -9.99 * Math.pow(10.0, 80.0);
                              case /* B */2 :
                                  return 100000000000000.0 + pointsForXInAColumn(match$15.tl);
                              case /* G */3 :
                                  break;
                              
                            }
                          }
                          break;
                      case /* B */2 :
                          var tl$3 = match$14.tl;
                          if (tl$3) {
                            if (tl$3.hd !== 1) {
                              return 1000.0 + pointsForXInAColumn(tl$3);
                            } else {
                              return 100000000000000.0 + pointsForXInAColumn(tl$3.tl);
                            }
                          } else {
                            return 1000.0 + pointsForXInAColumn(tl$3);
                          }
                      case /* G */3 :
                          break;
                      
                    }
                  }
                  break;
              case /* B */2 :
                  var match$16 = match$13.tl;
                  if (match$16) {
                    var match$17 = match$16.hd;
                    if (match$17 !== 0) {
                      switch (match$17) {
                        case /* R */1 :
                            return 1000.0 + pointsForXInAColumn(match$16.tl);
                        case /* B */2 :
                            var match$18 = match$16.tl;
                            if (match$18) {
                              var match$19 = match$18.hd;
                              if (match$19 < 3) {
                                switch (match$19) {
                                  case /* E */0 :
                                      var match$20 = match$18.tl;
                                      if (match$20 && match$20.hd === 2) {
                                        return 10000.0 + pointsForXInAColumn(match$20.tl);
                                      }
                                      break;
                                  case /* R */1 :
                                      break;
                                  case /* B */2 :
                                      var match$21 = match$18.tl;
                                      if (match$21) {
                                        switch (match$21.hd) {
                                          case /* E */0 :
                                              return 10000.0 + pointsForXInAColumn(match$21.tl);
                                          case /* R */1 :
                                              return -1000000000000000.0 + pointsForXInAColumn(match$21.tl);
                                          case /* B */2 :
                                              exit = 2;
                                              break;
                                          case /* G */3 :
                                              break;
                                          
                                        }
                                      }
                                      break;
                                  
                                }
                              }
                              
                            }
                            break;
                        case /* G */3 :
                            break;
                        
                      }
                    }
                    
                  }
                  break;
              case /* G */3 :
                  break;
              
            }
          }
          break;
      case /* B */2 :
          var match$22 = col.tl;
          if (match$22) {
            switch (match$22.hd) {
              case /* E */0 :
                  var tl$4 = match$22.tl;
                  if (!tl$4) {
                    return 0.1 + pointsForXInAColumn(tl$4);
                  }
                  if (tl$4.hd !== 2) {
                    return 0.1 + pointsForXInAColumn(tl$4);
                  }
                  var tl$5 = tl$4.tl;
                  if (tl$5) {
                    if (tl$5.hd !== 2) {
                      return 100.0 + pointsForXInAColumn(tl$5);
                    } else {
                      return 10000.0 + pointsForXInAColumn(tl$5.tl);
                    }
                  } else {
                    return 100.0 + pointsForXInAColumn(tl$5);
                  }
              case /* R */1 :
                  var match$23 = match$22.tl;
                  if (match$23) {
                    var match$24 = match$23.hd;
                    if (match$24 !== 0) {
                      switch (match$24) {
                        case /* R */1 :
                            var match$25 = match$23.tl;
                            if (match$25 && match$25.hd === 1) {
                              var match$26 = match$25.tl;
                              if (match$26) {
                                var match$27 = match$26.hd;
                                if (match$27 !== 0) {
                                  switch (match$27) {
                                    case /* R */1 :
                                        exit = 2;
                                        break;
                                    case /* B */2 :
                                        return 1000000000000000.0 + pointsForXInAColumn(match$26.tl);
                                    case /* G */3 :
                                        break;
                                    
                                  }
                                }
                                
                              }
                              
                            }
                            break;
                        case /* B */2 :
                            return -1000.0 + pointsForXInAColumn(match$23.tl);
                        case /* G */3 :
                            break;
                        
                      }
                    }
                    
                  }
                  break;
              case /* B */2 :
                  var match$28 = match$22.tl;
                  if (match$28) {
                    switch (match$28.hd) {
                      case /* E */0 :
                          var tl$6 = match$28.tl;
                          if (tl$6) {
                            if (tl$6.hd !== 2) {
                              return 100.0 + pointsForXInAColumn(tl$6);
                            } else {
                              return 10000.0 + pointsForXInAColumn(tl$6.tl);
                            }
                          } else {
                            return 100.0 + pointsForXInAColumn(tl$6);
                          }
                      case /* R */1 :
                          var tl$7 = match$28.tl;
                          if (tl$7) {
                            if (tl$7.hd !== 2) {
                              return -1000.0 + pointsForXInAColumn(tl$7);
                            } else {
                              return -10000000000000000.0 + pointsForXInAColumn(tl$7.tl);
                            }
                          } else {
                            return -1000.0 + pointsForXInAColumn(tl$7);
                          }
                      case /* B */2 :
                          var match$29 = match$28.tl;
                          if (match$29) {
                            switch (match$29.hd) {
                              case /* E */0 :
                                  return 10000.0 + pointsForXInAColumn(match$29.tl);
                              case /* R */1 :
                                  return -10000000000000000.0 + pointsForXInAColumn(match$29.tl);
                              case /* B */2 :
                                  return 9.99 * Math.pow(10.0, 80.0);
                              case /* G */3 :
                                  break;
                              
                            }
                          }
                          break;
                      case /* G */3 :
                          break;
                      
                    }
                  }
                  break;
              case /* G */3 :
                  break;
              
            }
          }
          break;
      case /* G */3 :
          exit = 2;
          break;
      
    }
    if (exit === 2) {
      var match$30 = col.tl;
      if (match$30) {
        var match$31 = match$30.hd;
        if (match$31 !== 0) {
          switch (match$31) {
            case /* R */1 :
                var match$32 = match$30.tl;
                if (match$32 && match$32.hd === 1) {
                  var match$33 = match$32.tl;
                  if (match$33 && match$33.hd === 1) {
                    var match$34 = match$33.tl;
                    if (match$34 && match$34.hd === 1) {
                      return -9.99 * Math.pow(10.0, 80.0);
                    }
                    
                  }
                  
                }
                break;
            case /* B */2 :
                var match$35 = match$30.tl;
                if (match$35 && match$35.hd === 2) {
                  var match$36 = match$35.tl;
                  if (match$36 && match$36.hd === 2) {
                    var match$37 = match$36.tl;
                    if (match$37 && match$37.hd === 2) {
                      return 9.99 * Math.pow(10.0, 80.0);
                    }
                    
                  }
                  
                }
                break;
            case /* G */3 :
                break;
            
          }
        }
        
      }
      
    }
    switch (_hd) {
      case /* E */0 :
          var match$38 = col.tl;
          if (match$38.hd >= 2) {
            var tl$8 = match$38.tl;
            if (!tl$8) {
              return 0.1 + pointsForXInAColumn(tl$8);
            }
            if (tl$8.hd !== 2) {
              return 0.1 + pointsForXInAColumn(tl$8);
            }
            var tl$9 = tl$8.tl;
            if (tl$9) {
              if (tl$9.hd !== 2) {
                return 100.0 + pointsForXInAColumn(tl$9);
              } else {
                return 10000.0 + pointsForXInAColumn(tl$9.tl);
              }
            } else {
              return 100.0 + pointsForXInAColumn(tl$9);
            }
          }
          var tl$10 = match$38.tl;
          if (!tl$10) {
            return -0.1 + pointsForXInAColumn(tl$10);
          }
          if (tl$10.hd !== 1) {
            return -0.1 + pointsForXInAColumn(tl$10);
          }
          var tl$11 = tl$10.tl;
          if (tl$11) {
            if (tl$11.hd !== 1) {
              return -100.0 + pointsForXInAColumn(tl$11);
            } else {
              return -10000.0 + pointsForXInAColumn(tl$11.tl);
            }
          } else {
            return -100.0 + pointsForXInAColumn(tl$11);
          }
      case /* R */1 :
          var tl$12 = col.tl;
          if (!tl$12) {
            return -0.1 + pointsForXInAColumn(tl$12);
          }
          switch (tl$12.hd) {
            case /* R */1 :
                return -100.0 + pointsForXInAColumn(tl$12.tl);
            case /* B */2 :
                var tl$13 = tl$12.tl;
                if (!tl$13) {
                  return 0.1 + pointsForXInAColumn(tl$13);
                }
                if (tl$13.hd !== 2) {
                  return 0.1 + pointsForXInAColumn(tl$13);
                }
                var tl$14 = tl$13.tl;
                if (tl$14) {
                  if (tl$14.hd !== 2) {
                    return -1000.0 + pointsForXInAColumn(tl$14);
                  } else {
                    return -10000000000000000.0 + pointsForXInAColumn(tl$14.tl);
                  }
                } else {
                  return -1000.0 + pointsForXInAColumn(tl$14);
                }
            case /* G */3 :
                return -0.1 + pointsForXInAColumn(tl$12);
            
          }
      case /* B */2 :
          var tl$15 = col.tl;
          if (!tl$15) {
            return 0.1 + pointsForXInAColumn(tl$15);
          }
          switch (tl$15.hd) {
            case /* R */1 :
                var tl$16 = tl$15.tl;
                if (!tl$16) {
                  return 0.1 + pointsForXInAColumn(tl$16);
                }
                if (tl$16.hd !== 1) {
                  return 0.1 + pointsForXInAColumn(tl$16);
                }
                var tl$17 = tl$16.tl;
                if (tl$17) {
                  if (tl$17.hd !== 1) {
                    return 1000.0 + pointsForXInAColumn(tl$17);
                  } else {
                    return 100000000000000.0 + pointsForXInAColumn(tl$17.tl);
                  }
                } else {
                  return 1000.0 + pointsForXInAColumn(tl$17);
                }
            case /* B */2 :
                return 100.0 + pointsForXInAColumn(tl$15.tl);
            case /* G */3 :
                return 0.1 + pointsForXInAColumn(tl$15);
            
          }
      case /* G */3 :
          _col = col.tl;
          continue ;
      
    }
  };
}

function totalPointsForState(bd) {
  return List.fold_right((function (x, y) {
                return x + y;
              }), List.map((function (x) {
                    return List.fold_right((function (x, y) {
                                  return x + y;
                                }), List.map(pointsForXInAColumn, x), 0.0);
                  }), {
                  hd: bd,
                  tl: {
                    hd: transpose(bd),
                    tl: {
                      hd: transpose(diagonalHelper(transpose(bd))),
                      tl: {
                        hd: transpose(diagonalHelper(List.rev(transpose(bd)))),
                        tl: /* [] */0
                      }
                    }
                  }
                }), 0.0);
}

function estimateValue(st) {
  return totalPointsForState(st._0);
}

var Connect4 = {
  createInitialColumns: createInitialColumns,
  createInitialBoard: createInitialBoard,
  initialState: initialState,
  stringOfPlayer: stringOfPlayer,
  stringOfCell: stringOfCell,
  stringOfColumn: stringOfColumn,
  boardPrintHelper: boardPrintHelper,
  transpose: transpose,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  moveOfString: moveOfString,
  horzFlip: horzFlip,
  diagonalHelper: diagonalHelper,
  produceOutcome: produceOutcome,
  changeBoardHelper: changeBoardHelper,
  checkFourInARow: checkFourInARow,
  nextState: nextState,
  pointsForXInAColumn: pointsForXInAColumn,
  totalPointsForState: totalPointsForState,
  estimateValue: estimateValue
};

CS17SetupGame$Game.checkExpect(createInitialColumns(1), {
      hd: /* E */0,
      tl: /* [] */0
    }, "creates a column of length 1");

CS17SetupGame$Game.checkError((function (param) {
        return createInitialColumns(0);
      }), "invalid dimensions");

CS17SetupGame$Game.checkExpect(createInitialColumns(6), {
      hd: /* E */0,
      tl: {
        hd: /* E */0,
        tl: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }, "creates a column of length 6");

CS17SetupGame$Game.checkExpect(createInitialColumns(3), {
      hd: /* E */0,
      tl: {
        hd: /* E */0,
        tl: {
          hd: /* E */0,
          tl: /* [] */0
        }
      }
    }, "creates a column of length 1");

CS17SetupGame$Game.checkExpect(createInitialBoard(1, 1), {
      hd: {
        hd: /* E */0,
        tl: /* [] */0
      },
      tl: /* [] */0
    }, "1 by 1 board");

CS17SetupGame$Game.checkExpect(createInitialBoard(2, 1), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* E */0,
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }, "2 by 1 board");

CS17SetupGame$Game.checkExpect(createInitialBoard(3, 3), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "3 by 3 board");

CS17SetupGame$Game.checkExpect(createInitialBoard(1, 3), {
      hd: {
        hd: /* E */0,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: /* E */0,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    }, "1 by 3 board");

CS17SetupGame$Game.checkExpect(initialState("1 1"), /* State */{
      _0: {
        hd: {
          hd: /* E */0,
          tl: /* [] */0
        },
        tl: /* [] */0
      },
      _1: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      }
    }, "initialize a 1 by 1 board");

CS17SetupGame$Game.checkExpect(initialState("2 1"), /* State */{
      _0: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: /* [] */0
          }
        },
        tl: /* [] */0
      },
      _1: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      }
    }, "initialize a 2 by 1 board");

CS17SetupGame$Game.checkExpect(initialState("3 3"), /* State */{
      _0: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: /* [] */0
                }
              }
            },
            tl: /* [] */0
          }
        }
      },
      _1: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      }
    }, "initialize a 3 by 3 board");

CS17SetupGame$Game.checkExpect(initialState("1 2"), /* State */{
      _0: {
        hd: {
          hd: /* E */0,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      },
      _1: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      }
    }, "initialize a 1 by 2 board");

CS17SetupGame$Game.checkExpect("Player 1", "Player 1", "represent player 1");

CS17SetupGame$Game.checkExpect("Player 2", "Player 2", "represent player 2");

CS17SetupGame$Game.checkExpect(" ", " ", "empty cell");

CS17SetupGame$Game.checkExpect("R", "R", "red cell");

CS17SetupGame$Game.checkExpect("B", "B", "blue cell");

CS17SetupGame$Game.checkExpect("G", "G", "green/bogus cell");

CS17SetupGame$Game.checkExpect(stringOfColumn({
          hd: "E",
          tl: /* [] */0
        }), "[E]", "1 element in the column");

CS17SetupGame$Game.checkExpect(stringOfColumn({
          hd: "E",
          tl: {
            hd: "E",
            tl: /* [] */0
          }
        }), "[E] [E]", "2 elements in the column");

CS17SetupGame$Game.checkExpect(stringOfColumn({
          hd: "E",
          tl: {
            hd: "E",
            tl: {
              hd: "E",
              tl: /* [] */0
            }
          }
        }), "[E] [E] [E]", "3 elements in the column");

CS17SetupGame$Game.checkError((function (param) {
        return stringOfColumn(/* [] */0);
      }), "Board cannot have an empty column");

CS17SetupGame$Game.checkExpect(boardPrintHelper({
          hd: {
            hd: /* E */0,
            tl: /* [] */0
          },
          tl: /* [] */0
        }), "[ ]\n", "printing a 1 by 1 board");

CS17SetupGame$Game.checkExpect(boardPrintHelper({
          hd: {
            hd: /* E */0,
            tl: /* [] */0
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: /* [] */0
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: /* [] */0
              },
              tl: /* [] */0
            }
          }
        }), "[ ]\n[ ]\n[ ]\n", "printing a 3 by 1 board");

CS17SetupGame$Game.checkExpect(boardPrintHelper({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), "[ ] [ ] [ ]\n[ ] [ ] [ ]\n[ ] [ ] [ ]\n", "printing a 3 by 1 board");

CS17SetupGame$Game.checkExpect(transpose({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* R */1,
          tl: {
            hd: /* B */2,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* R */1,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* B */2,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }, "3 by 2 board");

CS17SetupGame$Game.checkExpect(transpose({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* R */1,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* B */2,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* B */2,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }, "2 by 3 board");

CS17SetupGame$Game.checkExpect(transpose({
          hd: {
            hd: /* B */2,
            tl: /* [] */0
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: /* B */2,
        tl: /* [] */0
      },
      tl: /* [] */0
    }, "1 by 1 board");

CS17SetupGame$Game.checkExpect(transpose({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: /* R */1,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: /* B */2,
          tl: /* [] */0
        },
        tl: /* [] */0
      }
    }, "1 by 2 board");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          },
          _1: /* Draw */0
        }), "[ ] [ ]\n[ ] [ ]\n", "2 by 2 board and a draw");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          },
          _1: {
            TAG: /* Win */0,
            _0: /* P2 */1
          }
        }), "[R] [B] [R]\n[B] [B] [R]\n[R] [B] [R]\n", "3 by 3 board and a win");

CS17SetupGame$Game.checkExpect(String(1), "1", "move into column 1");

CS17SetupGame$Game.checkExpect(String(6), "6", "move into column 6");

CS17SetupGame$Game.checkExpect(String(7), "7", "move into column 7");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          },
          _1: {
            TAG: /* Win */0,
            _0: /* P2 */1
          }
        }), /* [] */0, "no legal moves available");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          }
        }), {
      hd: /* Move */{
        _0: 1
      },
      tl: /* [] */0
    }, "1 legal move available");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* B */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }), {
      hd: /* Move */{
        _0: 1
      },
      tl: {
        hd: /* Move */{
          _0: 3
        },
        tl: /* [] */0
      }
    }, "2 legal moves available");

CS17SetupGame$Game.checkExpect(/* Draw */0, /* Draw */0, "draw status");

CS17SetupGame$Game.checkExpect({
      TAG: /* Win */0,
      _0: /* P1 */0
    }, {
      TAG: /* Win */0,
      _0: /* P1 */0
    }, "Player 1 wins");

CS17SetupGame$Game.checkExpect({
      TAG: /* Win */0,
      _0: /* P2 */1
    }, {
      TAG: /* Win */0,
      _0: /* P2 */1
    }, "Player 2 wins");

CS17SetupGame$Game.checkExpect(moveOfString("1", /* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }), /* Move */{
      _0: 1
    }, "testing move(1)");

CS17SetupGame$Game.checkExpect(moveOfString("2", /* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }), /* Move */{
      _0: 2
    }, "testing move(2)");

CS17SetupGame$Game.checkError((function (param) {
        return moveOfString("3", /* State */{
                    _0: {
                      hd: {
                        hd: /* E */0,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      },
                      tl: {
                        hd: {
                          hd: /* E */0,
                          tl: {
                            hd: /* R */1,
                            tl: /* [] */0
                          }
                        },
                        tl: /* [] */0
                      }
                    },
                    _1: {
                      TAG: /* Ongoing */1,
                      _0: /* P1 */0
                    }
                  });
      }), "Not a legal move; choose another move");

CS17SetupGame$Game.checkError((function (param) {
        return moveOfString("hi", /* State */{
                    _0: {
                      hd: {
                        hd: /* E */0,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      },
                      tl: /* [] */0
                    },
                    _1: {
                      TAG: /* Ongoing */1,
                      _0: /* P2 */1
                    }
                  });
      }), "Not a legal move; choose another move");

CS17SetupGame$Game.checkError((function (param) {
        return moveOfString("2", /* State */{
                    _0: {
                      hd: {
                        hd: /* E */0,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      },
                      tl: {
                        hd: {
                          hd: /* E */0,
                          tl: {
                            hd: /* E */0,
                            tl: /* [] */0
                          }
                        },
                        tl: /* [] */0
                      }
                    },
                    _1: {
                      TAG: /* Win */0,
                      _0: /* P2 */1
                    }
                  });
      }), "Not a legal move; choose another move");

CS17SetupGame$Game.checkError((function (param) {
        return moveOfString("1", /* State */{
                    _0: {
                      hd: {
                        hd: /* E */0,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      },
                      tl: /* [] */0
                    },
                    _1: {
                      TAG: /* Win */0,
                      _0: /* P1 */0
                    }
                  });
      }), "Not a legal move; choose another move");

CS17SetupGame$Game.checkError((function (param) {
        return moveOfString("1", /* State */{
                    _0: {
                      hd: {
                        hd: /* E */0,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      },
                      tl: /* [] */0
                    },
                    _1: /* Draw */0
                  });
      }), "Not a legal move; choose another move");

CS17SetupGame$Game.checkExpect(List.rev({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* E */0,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: /* B */2,
          tl: {
            hd: /* R */1,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }, "3 by 2 board");

CS17SetupGame$Game.checkExpect(List.rev({
          hd: {
            hd: /* B */2,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* E */0,
          tl: {
            hd: /* R */1,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* B */2,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }, "2 by 3 board");

CS17SetupGame$Game.checkExpect(List.rev({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* R */1,
        tl: {
          hd: /* R */1,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "3 by 5 board");

CS17SetupGame$Game.checkExpect(diagonalHelper({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* R */1,
        tl: {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* G */3,
                tl: {
                  hd: /* G */3,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* G */3,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* G */3,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* G */3,
            tl: {
              hd: /* G */3,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "skewing a board full of R's");

CS17SetupGame$Game.checkExpect(diagonalHelper({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* R */1,
        tl: {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* G */3,
                tl: {
                  hd: /* G */3,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* G */3,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* G */3,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* G */3,
            tl: {
              hd: /* G */3,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "skewing a board with a 3-in-a-row blue diagonal");

CS17SetupGame$Game.checkExpect(produceOutcome(/* P2 */1, {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            }
          }
        }, /* [] */0), /* Draw */0, "draw status");

CS17SetupGame$Game.checkExpect(produceOutcome(/* P2 */1, {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            }
          }
        }, {
          hd: /* Move */{
            _0: 1
          },
          tl: {
            hd: /* Move */{
              _0: 2
            },
            tl: /* [] */0
          }
        }), {
      TAG: /* Win */0,
      _0: /* P2 */1
    }, "P2 wins");

CS17SetupGame$Game.checkExpect(produceOutcome(/* P1 */0, {
          hd: /* B */2,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            }
          }
        }, {
          hd: /* Move */{
            _0: 2
          },
          tl: {
            hd: /* Move */{
              _0: 3
            },
            tl: /* [] */0
          }
        }), {
      TAG: /* Win */0,
      _0: /* P1 */0
    }, "P1 wins");

CS17SetupGame$Game.checkExpect(changeBoardHelper({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* P1 */0, 0), {
      hd: {
        hd: /* B */2,
        tl: {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* B */2,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "P1 places a piece into column 1");

CS17SetupGame$Game.checkExpect(changeBoardHelper({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* P2 */1, 0), {
      hd: {
        hd: /* E */0,
        tl: {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "P2 places a piece into column 1");

CS17SetupGame$Game.checkError((function (param) {
        return changeBoardHelper({
                    hd: {
                      hd: /* B */2,
                      tl: {
                        hd: /* B */2,
                        tl: {
                          hd: /* R */1,
                          tl: {
                            hd: /* R */1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: /* R */1,
                        tl: {
                          hd: /* B */2,
                          tl: {
                            hd: /* B */2,
                            tl: {
                              hd: /* B */2,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: /* R */1,
                          tl: {
                            hd: /* B */2,
                            tl: {
                              hd: /* B */2,
                              tl: {
                                hd: /* R */1,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: /* B */2,
                            tl: {
                              hd: /* B */2,
                              tl: {
                                hd: /* B */2,
                                tl: {
                                  hd: /* R */1,
                                  tl: /* [] */0
                                }
                              }
                            }
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }, /* P2 */1, 1);
      }), "Column should have at least 1 empty cell when the player makes a move");

CS17SetupGame$Game.checkError((function (param) {
        return changeBoardHelper({
                    hd: {
                      hd: /* R */1,
                      tl: {
                        hd: /* B */2,
                        tl: {
                          hd: /* R */1,
                          tl: {
                            hd: /* R */1,
                            tl: /* [] */0
                          }
                        }
                      }
                    },
                    tl: {
                      hd: {
                        hd: /* R */1,
                        tl: {
                          hd: /* B */2,
                          tl: {
                            hd: /* B */2,
                            tl: {
                              hd: /* B */2,
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          hd: /* R */1,
                          tl: {
                            hd: /* B */2,
                            tl: {
                              hd: /* B */2,
                              tl: {
                                hd: /* R */1,
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: {
                          hd: {
                            hd: /* B */2,
                            tl: {
                              hd: /* B */2,
                              tl: {
                                hd: /* B */2,
                                tl: {
                                  hd: /* R */1,
                                  tl: /* [] */0
                                }
                              }
                            }
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }, /* P2 */1, 1);
      }), "Column should have at least 1 empty cell when the player makes a move");

CS17SetupGame$Game.checkExpect(checkFourInARow({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* B */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* P2 */1), {
      TAG: /* Win */0,
      _0: /* P2 */1
    }, "P2 wins, 4 in a row vertically");

CS17SetupGame$Game.checkExpect(checkFourInARow({
          hd: {
            hd: /* B */2,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* B */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* P1 */0), {
      TAG: /* Win */0,
      _0: /* P1 */0
    }, "P1 wins, 4 in a row horizontally");

CS17SetupGame$Game.checkExpect(checkFourInARow({
          hd: {
            hd: /* B */2,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* B */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* P1 */0), {
      TAG: /* Win */0,
      _0: /* P1 */0
    }, "P1 wins, 4 in a row diagonally");

CS17SetupGame$Game.checkExpect(checkFourInARow({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }, /* P2 */1), {
      TAG: /* Win */0,
      _0: /* P2 */1
    }, "P2 wins, 4 in a row diagonally");

CS17SetupGame$Game.checkExpect(nextState(/* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: {
                      hd: /* E */0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: {
                      hd: /* E */0,
                      tl: {
                        hd: /* E */0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* E */0,
                    tl: {
                      hd: /* E */0,
                      tl: {
                        hd: /* E */0,
                        tl: {
                          hd: /* E */0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          }
        }, /* Move */{
          _0: 1
        }), /* State */{
      _0: {
        hd: {
          hd: /* E */0,
          tl: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: {
                      hd: /* E */0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      },
      _1: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      }
    }, "game is ongoing");

CS17SetupGame$Game.checkExpect(nextState(/* State */{
          _0: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }, /* Move */{
          _0: 2
        }), /* State */{
      _0: {
        hd: {
          hd: /* B */2,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* B */2,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      },
      _1: {
        TAG: /* Ongoing */1,
        _0: /* P2 */1
      }
    }, "P1 wins");

CS17SetupGame$Game.checkExpect(nextState(/* State */{
          _0: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          }
        }, /* Move */{
          _0: 2
        }), /* State */{
      _0: {
        hd: {
          hd: /* B */2,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      },
      _1: {
        TAG: /* Win */0,
        _0: /* P2 */1
      }
    }, "P2 wins");

CS17SetupGame$Game.checkExpect(nextState(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* R */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          }
        }, /* Move */{
          _0: 3
        }), /* State */{
      _0: {
        hd: {
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      },
      _1: {
        TAG: /* Win */0,
        _0: /* P2 */1
      }
    }, "P2 wins");

CS17SetupGame$Game.checkExpect(nextState(/* State */{
          _0: {
            hd: {
              hd: /* E */0,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* B */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* R */1,
                        tl: {
                          hd: /* R */1,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }, /* Move */{
          _0: 1
        }), /* State */{
      _0: {
        hd: {
          hd: /* B */2,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      },
      _1: {
        TAG: /* Win */0,
        _0: /* P1 */0
      }
    }, "P1 wins");

CS17SetupGame$Game.checkExpect(pointsForXInAColumn({
          hd: /* E */0,
          tl: {
            hd: /* B */2,
            tl: {
              hd: /* B */2,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          }
        }), 9.99 * Math.pow(10.0, 80.0), "4 in a row for Blue");

CS17SetupGame$Game.checkExpect(pointsForXInAColumn({
          hd: /* B */2,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: /* [] */0
                }
              }
            }
          }
        }), -9.99 * Math.pow(10.0, 80.0), "4 in a row for Red");

CS17SetupGame$Game.checkExpect(pointsForXInAColumn({
          hd: /* R */1,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          }
        }), 100000000000000.1, "blocking red from getting 4 in a row");

CS17SetupGame$Game.checkExpect(pointsForXInAColumn({
          hd: /* E */0,
          tl: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              }
            }
          }
        }), 0, "2 in a row for R");

CS17SetupGame$Game.checkExpect(totalPointsForState({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }), 0, "evaluating a row");

CS17SetupGame$Game.checkExpect(totalPointsForState({
          hd: {
            hd: /* E */0,
            tl: {
              hd: /* E */0,
              tl: {
                hd: /* E */0,
                tl: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }), 0.0, "evaluating a row");

CS17SetupGame$Game.checkExpect(totalPointsForState({
          hd: {
            hd: /* R */1,
            tl: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: /* [] */0
                  }
                }
              }
            }
          },
          tl: /* [] */0
        }), 99999999999999.8, "evaluating a row");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: /* [] */0
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          }
        }), 99999999999999.8, "evaluating a position");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: /* [] */0
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }), 9.99000000000000111e+80, "evaluating a position");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* B */2,
                tl: {
                  hd: /* B */2,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          }
        }), 0.4, "evaluating a position");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */{
          _0: {
            hd: {
              hd: /* R */1,
              tl: {
                hd: /* R */1,
                tl: {
                  hd: /* R */1,
                  tl: {
                    hd: /* B */2,
                    tl: {
                      hd: /* B */2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* E */0,
                tl: {
                  hd: /* B */2,
                  tl: {
                    hd: /* R */1,
                    tl: {
                      hd: /* R */1,
                      tl: {
                        hd: /* B */2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* E */0,
                  tl: {
                    hd: /* E */0,
                    tl: {
                      hd: /* E */0,
                      tl: {
                        hd: /* E */0,
                        tl: {
                          hd: /* E */0,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* R */1,
                    tl: {
                      hd: /* B */2,
                      tl: {
                        hd: /* B */2,
                        tl: {
                          hd: /* B */2,
                          tl: {
                            hd: /* R */1,
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          },
          _1: {
            TAG: /* Ongoing */1,
            _0: /* P2 */1
          }
        }), -900000000008899.4, "evaluating a position");

var MyGame = {
  stringOfPlayer: stringOfPlayer,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  initialState: initialState,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  nextState: nextState,
  moveOfString: moveOfString,
  estimateValue: estimateValue
};

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
/*  Not a pure module */
