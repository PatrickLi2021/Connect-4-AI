// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Connect4$Game = require("./Connect4.bs.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function AIPlayer(MyGame) {
  var argMax = function (lst, f) {
    if (!lst) {
      return Pervasives.failwith("domain error");
    }
    var tl = lst.tl;
    var a = lst.hd;
    if (!tl) {
      return [
              a,
              Curry._1(f, a)
            ];
    }
    var match = argMax(tl, f);
    var rf = match[1];
    var hdf = Curry._1(f, a);
    if (rf > hdf) {
      return [
              match[0],
              rf
            ];
    } else {
      return [
              a,
              hdf
            ];
    }
  };
  var argMin = function (lst, f) {
    var fneg = function (x) {
      return -Curry._1(f, x);
    };
    return argMax(lst, fneg);
  };
  var minimax = function (s, depth) {
    if (depth === 0) {
      return Curry._1(MyGame.estimateValue, s);
    }
    var match = Curry._1(MyGame.gameStatus, s);
    if (typeof match === "number") {
      return 0.0;
    }
    if (match.TAG === /* Win */0) {
      if (match._0) {
        return -9.99 * Math.pow(10.0, 80.0);
      } else {
        return 9.99 * Math.pow(10.0, 80.0);
      }
    }
    if (match._0) {
      var match$1 = argMin(List.map((function (m) {
                  return Curry._2(MyGame.nextState, s, m);
                }), Curry._1(MyGame.legalMoves, s)), (function (st) {
              return minimax(st, depth - 1 | 0);
            }));
      return 0.999999999999999 * -match$1[1];
    }
    var match$2 = argMax(List.map((function (m) {
                return Curry._2(MyGame.nextState, s, m);
              }), Curry._1(MyGame.legalMoves, s)), (function (st) {
            return minimax(st, depth - 1 | 0);
          }));
    return 0.999999999999999 * match$2[1];
  };
  var nextMove = function (s) {
    var moveLocationHelper = function (_lstSt, st, _n) {
      while(true) {
        var n = _n;
        var lstSt = _lstSt;
        if (!lstSt) {
          return Pervasives.failwith("");
        }
        if (Caml_obj.caml_equal(lstSt.hd, st)) {
          return n;
        }
        _n = n + 1 | 0;
        _lstSt = lstSt.tl;
        continue ;
      };
    };
    var lstMoves = Curry._1(MyGame.legalMoves, s);
    var lstStates = List.map((function (m) {
            return Curry._2(MyGame.nextState, s, m);
          }), lstMoves);
    if (Caml_obj.caml_equal(Curry._1(MyGame.gameStatus, s), {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          })) {
      var match = argMax(lstStates, (function (st) {
              return minimax(st, 4);
            }));
      return List.nth(lstMoves, moveLocationHelper(lstStates, match[0], 0));
    }
    var match$1 = argMin(lstStates, (function (st) {
            return minimax(st, 4);
          }));
    return List.nth(lstMoves, moveLocationHelper(lstStates, match$1[0], 0));
  };
  return {
          PlayerGame: MyGame,
          argMax: argMax,
          argMin: argMin,
          minimax: minimax,
          nextMove: nextMove,
          playerName: "Jean and Patrick"
        };
}

var MyGame_stringOfPlayer = Connect4$Game.Connect4.stringOfPlayer;

var MyGame_stringOfState = Connect4$Game.Connect4.stringOfState;

var MyGame_stringOfMove = Connect4$Game.Connect4.stringOfMove;

var MyGame_initialState = Connect4$Game.Connect4.initialState;

var MyGame_legalMoves = Connect4$Game.Connect4.legalMoves;

var MyGame_gameStatus = Connect4$Game.Connect4.gameStatus;

var MyGame_nextState = Connect4$Game.Connect4.nextState;

var MyGame_moveOfString = Connect4$Game.Connect4.moveOfString;

var MyGame_estimateValue = Connect4$Game.Connect4.estimateValue;

var MyGame = {
  stringOfPlayer: MyGame_stringOfPlayer,
  stringOfState: MyGame_stringOfState,
  stringOfMove: MyGame_stringOfMove,
  initialState: MyGame_initialState,
  legalMoves: MyGame_legalMoves,
  gameStatus: MyGame_gameStatus,
  nextState: MyGame_nextState,
  moveOfString: MyGame_moveOfString,
  estimateValue: MyGame_estimateValue
};

function argMax(lst, f) {
  if (!lst) {
    return Pervasives.failwith("domain error");
  }
  var tl = lst.tl;
  var a = lst.hd;
  if (!tl) {
    return [
            a,
            Curry._1(f, a)
          ];
  }
  var match = argMax(tl, f);
  var rf = match[1];
  var hdf = Curry._1(f, a);
  if (rf > hdf) {
    return [
            match[0],
            rf
          ];
  } else {
    return [
            a,
            hdf
          ];
  }
}

function argMin(lst, f) {
  var fneg = function (x) {
    return -Curry._1(f, x);
  };
  return argMax(lst, fneg);
}

function minimax(s, depth) {
  if (depth === 0) {
    return Curry._1(Connect4$Game.Connect4.estimateValue, s);
  }
  var match = Curry._1(Connect4$Game.Connect4.gameStatus, s);
  if (typeof match === "number") {
    return 0.0;
  }
  if (match.TAG === /* Win */0) {
    if (match._0) {
      return -9.99 * Math.pow(10.0, 80.0);
    } else {
      return 9.99 * Math.pow(10.0, 80.0);
    }
  }
  if (match._0) {
    var match$1 = argMin(List.map((function (m) {
                return Curry._2(Connect4$Game.Connect4.nextState, s, m);
              }), Curry._1(Connect4$Game.Connect4.legalMoves, s)), (function (st) {
            return minimax(st, depth - 1 | 0);
          }));
    return 0.999999999999999 * -match$1[1];
  }
  var match$2 = argMax(List.map((function (m) {
              return Curry._2(Connect4$Game.Connect4.nextState, s, m);
            }), Curry._1(Connect4$Game.Connect4.legalMoves, s)), (function (st) {
          return minimax(st, depth - 1 | 0);
        }));
  return 0.999999999999999 * match$2[1];
}

function nextMove(s) {
  var moveLocationHelper = function (_lstSt, st, _n) {
    while(true) {
      var n = _n;
      var lstSt = _lstSt;
      if (!lstSt) {
        return Pervasives.failwith("");
      }
      if (Caml_obj.caml_equal(lstSt.hd, st)) {
        return n;
      }
      _n = n + 1 | 0;
      _lstSt = lstSt.tl;
      continue ;
    };
  };
  var lstMoves = Curry._1(Connect4$Game.Connect4.legalMoves, s);
  var lstStates = List.map((function (m) {
          return Curry._2(Connect4$Game.Connect4.nextState, s, m);
        }), lstMoves);
  if (Caml_obj.caml_equal(Curry._1(Connect4$Game.Connect4.gameStatus, s), {
          TAG: /* Ongoing */1,
          _0: /* P1 */0
        })) {
    var match = argMax(lstStates, (function (st) {
            return minimax(st, 4);
          }));
    return List.nth(lstMoves, moveLocationHelper(lstStates, match[0], 0));
  }
  var match$1 = argMin(lstStates, (function (st) {
          return minimax(st, 4);
        }));
  return List.nth(lstMoves, moveLocationHelper(lstStates, match$1[0], 0));
}

var playerName = "Jean and Patrick";

var TestAIPlayer = {
  PlayerGame: MyGame,
  argMax: argMax,
  argMin: argMin,
  minimax: minimax,
  nextMove: nextMove,
  playerName: playerName
};

CS17SetupGame$Game.checkExpect(argMax({
          hd: 1.0,
          tl: {
            hd: 2.0,
            tl: {
              hd: 3.0,
              tl: {
                hd: 4.0,
                tl: /* [] */0
              }
            }
          }
        }, (function (x) {
            return x + 2.0;
          })), [
      4,
      6
    ], "list of floats");

CS17SetupGame$Game.checkExpect(argMax({
          hd: 15.7,
          tl: {
            hd: 66.12,
            tl: {
              hd: -6.23,
              tl: {
                hd: 77.2,
                tl: /* [] */0
              }
            }
          }
        }, (function (x) {
            return x + 5.5;
          })), [
      77.2,
      82.7
    ], "list of floats with neg.");

CS17SetupGame$Game.checkExpect(argMax({
          hd: 5.0,
          tl: /* [] */0
        }, (function (x) {
            return x * 5.5;
          })), [
      5,
      27.5
    ], "one element list");

CS17SetupGame$Game.checkExpect(argMin({
          hd: 1.6,
          tl: {
            hd: 2.12,
            tl: {
              hd: 3.1,
              tl: {
                hd: -6.55,
                tl: /* [] */0
              }
            }
          }
        }, (function (x) {
            return x - 2.0;
          })), [
      -6.55,
      8.55
    ], "list of floats");

CS17SetupGame$Game.checkExpect(argMin({
          hd: 15.44,
          tl: {
            hd: 62.122,
            tl: {
              hd: -100.0,
              tl: {
                hd: 100.0,
                tl: /* [] */0
              }
            }
          }
        }, (function (x) {
            return x / 5.0;
          })), [
      -100,
      20
    ], "list of floats with neg.");

CS17SetupGame$Game.checkExpect(argMin({
          hd: 5.0,
          tl: {
            hd: 3.2,
            tl: /* [] */0
          }
        }, (function (x) {
            return x * 5.5;
          })), [
      3.2,
      -17.6
    ], "operator is multiplication");

var TestGame;

var MyAIPlayer = {
  PlayerGame: MyGame,
  nextMove: nextMove,
  playerName: playerName
};

exports.AIPlayer = AIPlayer;
exports.TestGame = TestGame;
exports.TestAIPlayer = TestAIPlayer;
exports.MyAIPlayer = MyAIPlayer;
/*  Not a pure module */
